package com.panpan.walle.app.baidu;

import com.alibaba.fastjson.JSON;
import com.baidu.unionloan.bean.EncryptBean;
import com.baidu.unionloan.service.CipherService;

public class BDMain {
    public static String publicKeyBD = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArIGhXYMqK9dbb7CYXjOdYnYiONCX4KGkHo8pMpAK59l1L1Ve6y2IdW/6W5ZHth8mE/BK1YIVvS8HCifQsT02ewU2Oq6/fcnlgH1vlFRHJNHjPpVlPyUjIPJjLQcnNFeMNHupBdUY6UK6dneBSzB+Yv7dF9/DKOClOOE2k5BUgYwLS74GN7XewrnRODvK2Lka1y4VRUKwHuKRtWT2XrOBIka6R0q4pwV96MW+52+9ASc8stKU5ymSiILKEHUo/wY6AYSZYIfMphpuSMIKEn0cJ3SdE1sFUeARJrPBu77bOl9YV9BGMIMb7CJm+TPW+KCBdjeo1pZP45CVSybFoFTw6wIDAQAB";
    public static String privateKeyLih = "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDBGDxX27KiQF3CYP6dd9Mou+w2/VwZG/i9jmTdytsts/i2dvVA61yYQ6Gqlij7dp1WO69BRVnmdIP0PSvWTAEnAZNnj098m0Q9OXgnNeU0hRs78Z+cKRskErj7GeBMScz6jxXfzRHUYAPCdr5SHshy4HWj+dRcR0mhXtPV/5JW1PA+y/hFZAemQv7pUtZzHPDtMSDqMoT5/ZHH31zh8VHiS1gjeE+WOdsX2lpgEvAbfKSpyPNHkeJb5oomhX+GBa6u2j+I+imqdHj16zWsnIpR704DRzc4tUZTyUPbWG69RIPJu4aBYnG5uhld5F478oMipAvwPQFv0j774G5UDWUhAgMBAAECggEAXZl55rzAYpYA3PBXe81RtjUh06YMtr8wW/JiQoDKreTHcutHBykPwV9HRoFzbDGbIunbkjAj2+ou7H2aek5tYJMK+PAm/6fj9CmfbKJbcJH1GaGOVQw388x/jniEmXZMvkgNumaVdfT03ZbhurzhPY5AeDPqFLEZp/dniBxSu3O1NPcy+icoM7nhVpoHKbFOjBX2Cos0Dc5V1wd9sENPIBKWjAByee5x/JhWRHqxJM2KwDMdICiB4bPyPAJyv/mwC9ND3HJvRfOdY8RfMbD0wYwoGMgG+j8LRq6TYef832lNinMlHp/FOQX6EZhcd0Kf+mGsVvmIbPzvF0lfigHkYQKBgQDmBCopoe7K6D1JquCuNlR5bEdb4Y3IMR61htKjzrZDYicelvWw7tf5GLSiON6II4FLw2gPg1nAWOQymS45ZZhdeqyar0dV94Sl/rvrNZf9E4jDh90/WYWskN52I7YyPZ4OhKSKhlsFJr/wYnGT7oSNv6lBofIEc9NeejrrOA7RJwKBgQDW6FYO91AVx954k4QIXE3Ij2HKceiiBcXh0cztOzFDNSbxjNc2lZT5TzJ1+IXIev16cO+kXmE/IhmVP20z7WXGO2+5vXm+Su158OrNem7veMz3ZGXoo6JO3l2J9U1HNH720bAIiZdpy67F1bckLEz1FqMPeV/Q5oybnwo4PEf0dwKBgF919QWoRhGCBwWO3IaQ18g47visCIrAEA2ocb04Kh6XGsMwRbFzvsCLx1PYJEr96UhHReXCTrpsafCx8CQ0DOMm6YGdIw8DldLKgLUiXfzTYZw8w87p2Xd//EOtmI0LU5CU7jDrh9UAewJJ6PdLM0oc9CLgEjBU3bFFKzS55DRbAoGAMNmVHkfHM3xALKZTf9cDc1BsSSlFWPb4+RDIhTBMTVuao5OBJA4yU81Vyg0Y0+5pCdj8EB/H+SLWL9/AAeq3lKzUA6N3NfMwMeS6asSmzNZnuOBgbdYsQcM3/fD9hO8A4TfezMIB4fGDo8Klo5pST++6Vv0e84xEb+dh2lCRhpcCgYBAJKEughVmOlLEwEKi3Vzzx6zD45aTFI0+kh3P9F0Ek4Rxy5UvFfPOGd11OgOoIwYSacUIERAHtNqmVVuh5A1mLQYwFm3XALRhCtg5TwwCUxPOOdsKvR5nAwBJO+8QUw/1rvPZVO+pZ5BpHLxR6mm9nEvly/6RRpkpeT1ChBVHzQ==";
    public static String icode="0213";
    public static String version="0";

    public static void main(String[] args) throws Exception {
        String origMsg="icode=0213&salt=E+lZ5CM+HfRlxQIGZVeKEPIQ33F7R9+w4jD5iE+2wnTXzXC3lA6QAweFdq2QsJ12uDzpKXEIMZrH2jmLTp2S2IPeOeljLDY6VowO/97LI6nRzdnO04sUkNyZbMwpVIn1FVjJ96qy5JtNtu0QPjgeRHImACvFF8g9ufwegWCH9IHSx3T99pk0FlAFC5LpbtPKrevYFKHtFZxPuy8imHLNtXO2FJ2Jmi+jTqBCyiTOv/uvMVp+fLfCJcd+yIOUPLtArJlwHDqiPb/++jyABrtDwTx7F8Ey/+ODU7nBTznFqohtSkU0wAmzrvFHLAvixYYHmIBjTx0pfzJQhQb8GoP2Pg==&data=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&sign=drbQjAbkWgsZZdwBUUhX6SvzrZcwGND5BY2CJNmYkJnIUExTOZO1IrKhmnCTmgC6itjHPkkt0oOEHzVyUJ3HCRO5jNXk23hoDg/9xDPi5frj1W5zWwQje3gsUpOx1Cdz0C4FGYW0rciBrWXTwAJkiBsimhELe+JanIk8OUAThQVh2fuFDiQZulpCmXHjwLi9oNM8pRwhdz56m/LhedQMnbiHWIobFFw6enyVBk6ioVLF3/k68a7qkrJY0D50MrKRUAlRzZr47piKTf4t7I5DexW+tAkxGDp62wYg7Ttor1IpRhFfubKUQhWHGny6oId3In+PxqbLoUvgfG6LDqoSIg==&key=luvZGmCXixbcqZKmWTaWXHbscpcS5wQhFRaIxvMY1ipkkGD/7WTFNc4D9cZxsPNSMEjwHwevIJnN3kISt7TX/jF85HEyzB+Sb/VECMlYyCScpEul4RQkHP6Qvwue0roICkEFaYYsYEvGZ5PTeX5v8J8SyzTwdNTaslZ/FYicEmWn5Nfl+TbuKa/SNio4OlbaS1PiTM2mpJleZD9+SOU2x1yI0URriJxY1kKeZoqoqSq05Um3wHMZkrm4SITybRMHSbjb2aPSrknbdWxV+BvZLAvg0zW4IxPixLlG5NyWYaVhyn8ZrS6lnY17Uz81G58UwIs+iNdr7eKjRPzqRuW1dQ==";
        String res = decrypt(origMsg);
        System.out.println("解密结果\n" + res);


        String plainText = "{\"retCode\":\"0\",\"type\":\"async\",\"message\":{\"transactionType\":\"apply\",\"expanding\":{\"initialAmount\":\"1000000\",\"creditValidityDays\":\"30\",\"risCode\":\"10000\"},\"sessionId\":\"2202008094574097736058882129_4574097736058882136_ul\",\"transactionId\":\"4574097736058882135\",\"timestamp\":\"1596955986\",\"basicInfo\":{\"prcid\":\"110102199003193317\",\"name\":\"助贷测试\",\"phonenumber\":\"18721710815\",\"bankcard\":\"6226090973157713\"}},\"reqSn\":\"0100000105001\"}";
        String res2 = encrypt(plainText);
        System.out.println("加密结果\n" +res2);
    }

    /**
     * 百度报文解密
     *
     * @param encryptJson
     * @return
     * @throws Exception
     */
    public static String decrypt(String encryptJson) throws Exception {
        String reqJson = BDUtils.convertURLToJSON(encryptJson);
        EncryptBean encryptBean = JSON.parseObject(reqJson, EncryptBean.class);

        return CipherService.decryptData(publicKeyBD, privateKeyLih, encryptBean);
    }

    /**
     * 百度报文加密
     *
     * @param plainText
     * @return
     * @throws Exception
     */
    public static String encrypt(String plainText) throws Exception {
        EncryptBean  encryptBean = CipherService.encryptData(plainText, publicKeyBD, privateKeyLih, icode, version);
        return JSON.toJSONString(encryptBean);
    }
}
